{"ast":null,"code":"var _jsxFileName = \"/app/src/pages/progression.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport '../styles/progression.css';\nimport '../styles/general.css';\nimport '../styles/form.css';\nimport Header from '../components/header';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(ArcElement, Tooltip, Legend, ChartDataLabels);\nconst ProgressionChart = () => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  const allSubjects = ['Mathématiques', 'Français', 'Histoire', 'Géographie', 'Sciences', 'Anglais'];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/dashboard/student', {\n          headers: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n        console.log('Data:', response.data);\n        const subjectsData = {};\n        allSubjects.forEach(subject => {\n          subjectsData[subject] = {\n            goodAnswers: 0,\n            badAnswers: 0\n          };\n        });\n        Object.entries(response.data).forEach(([subject, result]) => {\n          const score = parseInt(result.totalScore, 10);\n          const totalQuestions = parseInt(result.questionCount, 10);\n          if (subjectsData[subject]) {\n            subjectsData[subject].goodAnswers = score;\n            subjectsData[subject].badAnswers = totalQuestions - score;\n          }\n        });\n        const charts = {};\n        Object.keys(subjectsData).forEach(subject => {\n          const goodAnswers = subjectsData[subject].goodAnswers;\n          const badAnswers = subjectsData[subject].badAnswers;\n          const totalAnswers = goodAnswers + badAnswers;\n          const percentage = totalAnswers > 0 ? (goodAnswers / totalAnswers * 100).toFixed(0) : null;\n          charts[subject] = {\n            labels: ['Bonnes Réponses', 'Mauvaises Réponses'],\n            datasets: [{\n              label: subject,\n              data: [goodAnswers, badAnswers],\n              backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)'],\n              borderWidth: 1\n            }],\n            plugins: {\n              datalabels: {\n                display: context => context.dataIndex === 0,\n                formatter: (value, context) => {\n                  const total = context.dataset.data.reduce((acc, val) => acc + val, 0);\n                  const percentage = total > 0 ? (context.dataset.data[0] / total * 100).toFixed(0) : null;\n                  return percentage !== null ? `${percentage}%` : 'pas de données';\n                },\n                color: 'black',\n                font: {\n                  weight: 'bold',\n                  size: 16\n                }\n              }\n            }\n          };\n        });\n        setChartData(charts);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Voici ta progression :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-grid\",\n      children: Object.keys(chartData).map(subject => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: subject\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Doughnut, {\n          data: chartData[subject],\n          options: {\n            responsive: true,\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              title: {\n                display: true,\n                text: `Progression en ${subject}`\n              },\n              datalabels: {\n                display: context => context.dataIndex === 0,\n                formatter: (value, context) => {\n                  const total = context.dataset.data.reduce((acc, val) => acc + val, 0);\n                  const percentage = total > 0 ? (context.dataset.data[0] / total * 100).toFixed(0) : null;\n                  return percentage !== null ? `${percentage}%` : 'pas de données';\n                },\n                color: 'black',\n                font: {\n                  weight: 'bold',\n                  size: 16\n                }\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, subject, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(ProgressionChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = ProgressionChart;\nexport default ProgressionChart;\nvar _c;\n$RefreshReg$(_c, \"ProgressionChart\");","map":{"version":3,"names":["React","useEffect","useState","Doughnut","axios","Chart","ChartJS","ArcElement","Tooltip","Legend","ChartDataLabels","Header","jsxDEV","_jsxDEV","register","ProgressionChart","_s","chartData","setChartData","allSubjects","fetchData","token","localStorage","getItem","response","get","headers","Authorization","console","log","data","subjectsData","forEach","subject","goodAnswers","badAnswers","Object","entries","result","score","parseInt","totalScore","totalQuestions","questionCount","charts","keys","totalAnswers","percentage","toFixed","labels","datasets","label","backgroundColor","borderWidth","plugins","datalabels","display","context","dataIndex","formatter","value","total","dataset","reduce","acc","val","color","font","weight","size","error","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","options","responsive","legend","position","title","text","_c","$RefreshReg$"],"sources":["/app/src/pages/progression.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\nimport '../styles/progression.css';\nimport '../styles/general.css';\nimport '../styles/form.css';\nimport Header from '../components/header';\n\nChartJS.register(ArcElement, Tooltip, Legend, ChartDataLabels);\n\nconst ProgressionChart = () => {\n  const [chartData, setChartData] = useState({});\n\n  const allSubjects = ['Mathématiques', 'Français', 'Histoire', 'Géographie', 'Sciences', 'Anglais'];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await axios.get('http://localhost:5000/dashboard/student', {\n          headers: { Authorization: `Bearer ${token}` },\n        });\n\n        console.log('Data:', response.data);\n\n        const subjectsData = {};\n\n        allSubjects.forEach((subject) => {\n          subjectsData[subject] = {\n            goodAnswers: 0,\n            badAnswers: 0,\n          };\n        });\n\n        Object.entries(response.data).forEach(([subject, result]) => {\n          const score = parseInt(result.totalScore, 10);\n          const totalQuestions = parseInt(result.questionCount, 10);\n\n          if (subjectsData[subject]) {\n            subjectsData[subject].goodAnswers = score;\n            subjectsData[subject].badAnswers = totalQuestions - score;\n          }\n        });\n\n        const charts = {};\n        Object.keys(subjectsData).forEach((subject) => {\n          const goodAnswers = subjectsData[subject].goodAnswers;\n          const badAnswers = subjectsData[subject].badAnswers;\n          const totalAnswers = goodAnswers + badAnswers;\n          const percentage = totalAnswers > 0 ? ((goodAnswers / totalAnswers) * 100).toFixed(0) : null;\n\n          charts[subject] = {\n            labels: ['Bonnes Réponses', 'Mauvaises Réponses'],\n            datasets: [\n              {\n                label: subject,\n                data: [goodAnswers, badAnswers],\n                backgroundColor: [\n                  'rgba(75, 192, 192, 0.6)',\n                  'rgba(255, 99, 132, 0.6)',\n                ],\n                borderWidth: 1,\n              },\n            ],\n            plugins: {\n              datalabels: {\n                display: (context) => context.dataIndex === 0,\n                formatter: (value, context) => {\n                  const total = context.dataset.data.reduce((acc, val) => acc + val, 0);\n                  const percentage = total > 0 ? ((context.dataset.data[0] / total) * 100).toFixed(0) : null;\n                  return percentage !== null ? `${percentage}%` : 'pas de données';\n                },\n                color: 'black',\n                font: {\n                  weight: 'bold',\n                  size: 16,\n                },\n              },\n            },\n          };\n        });\n\n        setChartData(charts);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <Header/>\n      <h2>Voici ta progression :</h2>\n      <div className='chart-grid'>\n        {Object.keys(chartData).map((subject) => (\n          <div key={subject} className=\"chart-container\">\n            <h3>{subject}</h3>\n            <Doughnut\n              data={chartData[subject]}\n              options={{\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top',\n                  },\n                  title: {\n                    display: true,\n                    text: `Progression en ${subject}`,\n                  },\n                  datalabels: {\n                    display: (context) => context.dataIndex === 0,\n                    formatter: (value, context) => {\n                      const total = context.dataset.data.reduce((acc, val) => acc + val, 0);\n                      const percentage = total > 0 ? ((context.dataset.data[0] / total) * 100).toFixed(0) : null;\n                      return percentage !== null ? `${percentage}%` : 'pas de données';\n                    },\n                    color: 'black',\n                    font: {\n                      weight: 'bold',\n                      size: 16,\n                    },\n                  },\n                },\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressionChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,IAAIC,OAAO,EAAEC,UAAU,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxE,OAAOC,eAAe,MAAM,2BAA2B;AACvD,OAAO,2BAA2B;AAClC,OAAO,uBAAuB;AAC9B,OAAO,oBAAoB;AAC3B,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1CP,OAAO,CAACQ,QAAQ,CAACP,UAAU,EAAEC,OAAO,EAAEC,MAAM,EAAEC,eAAe,CAAC;AAE9D,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE9C,MAAMiB,WAAW,GAAG,CAAC,eAAe,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,SAAS,CAAC;EAElGlB,SAAS,CAAC,MAAM;IACd,MAAMmB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC3C,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,GAAG,CAAC,yCAAyC,EAAE;UAC1EC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUN,KAAK;UAAG;QAC9C,CAAC,CAAC;QAEFO,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEL,QAAQ,CAACM,IAAI,CAAC;QAEnC,MAAMC,YAAY,GAAG,CAAC,CAAC;QAEvBZ,WAAW,CAACa,OAAO,CAAEC,OAAO,IAAK;UAC/BF,YAAY,CAACE,OAAO,CAAC,GAAG;YACtBC,WAAW,EAAE,CAAC;YACdC,UAAU,EAAE;UACd,CAAC;QACH,CAAC,CAAC;QAEFC,MAAM,CAACC,OAAO,CAACb,QAAQ,CAACM,IAAI,CAAC,CAACE,OAAO,CAAC,CAAC,CAACC,OAAO,EAAEK,MAAM,CAAC,KAAK;UAC3D,MAAMC,KAAK,GAAGC,QAAQ,CAACF,MAAM,CAACG,UAAU,EAAE,EAAE,CAAC;UAC7C,MAAMC,cAAc,GAAGF,QAAQ,CAACF,MAAM,CAACK,aAAa,EAAE,EAAE,CAAC;UAEzD,IAAIZ,YAAY,CAACE,OAAO,CAAC,EAAE;YACzBF,YAAY,CAACE,OAAO,CAAC,CAACC,WAAW,GAAGK,KAAK;YACzCR,YAAY,CAACE,OAAO,CAAC,CAACE,UAAU,GAAGO,cAAc,GAAGH,KAAK;UAC3D;QACF,CAAC,CAAC;QAEF,MAAMK,MAAM,GAAG,CAAC,CAAC;QACjBR,MAAM,CAACS,IAAI,CAACd,YAAY,CAAC,CAACC,OAAO,CAAEC,OAAO,IAAK;UAC7C,MAAMC,WAAW,GAAGH,YAAY,CAACE,OAAO,CAAC,CAACC,WAAW;UACrD,MAAMC,UAAU,GAAGJ,YAAY,CAACE,OAAO,CAAC,CAACE,UAAU;UACnD,MAAMW,YAAY,GAAGZ,WAAW,GAAGC,UAAU;UAC7C,MAAMY,UAAU,GAAGD,YAAY,GAAG,CAAC,GAAG,CAAEZ,WAAW,GAAGY,YAAY,GAAI,GAAG,EAAEE,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;UAE5FJ,MAAM,CAACX,OAAO,CAAC,GAAG;YAChBgB,MAAM,EAAE,CAAC,iBAAiB,EAAE,oBAAoB,CAAC;YACjDC,QAAQ,EAAE,CACR;cACEC,KAAK,EAAElB,OAAO;cACdH,IAAI,EAAE,CAACI,WAAW,EAAEC,UAAU,CAAC;cAC/BiB,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,CAC1B;cACDC,WAAW,EAAE;YACf,CAAC,CACF;YACDC,OAAO,EAAE;cACPC,UAAU,EAAE;gBACVC,OAAO,EAAGC,OAAO,IAAKA,OAAO,CAACC,SAAS,KAAK,CAAC;gBAC7CC,SAAS,EAAEA,CAACC,KAAK,EAAEH,OAAO,KAAK;kBAC7B,MAAMI,KAAK,GAAGJ,OAAO,CAACK,OAAO,CAAChC,IAAI,CAACiC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;kBACrE,MAAMlB,UAAU,GAAGc,KAAK,GAAG,CAAC,GAAG,CAAEJ,OAAO,CAACK,OAAO,CAAChC,IAAI,CAAC,CAAC,CAAC,GAAG+B,KAAK,GAAI,GAAG,EAAEb,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;kBAC1F,OAAOD,UAAU,KAAK,IAAI,GAAG,GAAGA,UAAU,GAAG,GAAG,gBAAgB;gBAClE,CAAC;gBACDmB,KAAK,EAAE,OAAO;gBACdC,IAAI,EAAE;kBACJC,MAAM,EAAE,MAAM;kBACdC,IAAI,EAAE;gBACR;cACF;YACF;UACF,CAAC;QACH,CAAC,CAAC;QAEFnD,YAAY,CAAC0B,MAAM,CAAC;MACtB,CAAC,CAAC,OAAO0B,KAAK,EAAE;QACd1C,OAAO,CAAC0C,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDlD,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAA0D,QAAA,gBACE1D,OAAA,CAACF,MAAM;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACT9D,OAAA;MAAA0D,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/B9D,OAAA;MAAK+D,SAAS,EAAC,YAAY;MAAAL,QAAA,EACxBnC,MAAM,CAACS,IAAI,CAAC5B,SAAS,CAAC,CAAC4D,GAAG,CAAE5C,OAAO,iBAClCpB,OAAA;QAAmB+D,SAAS,EAAC,iBAAiB;QAAAL,QAAA,gBAC5C1D,OAAA;UAAA0D,QAAA,EAAKtC;QAAO;UAAAuC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClB9D,OAAA,CAACV,QAAQ;UACP2B,IAAI,EAAEb,SAAS,CAACgB,OAAO,CAAE;UACzB6C,OAAO,EAAE;YACPC,UAAU,EAAE,IAAI;YAChBzB,OAAO,EAAE;cACP0B,MAAM,EAAE;gBACNC,QAAQ,EAAE;cACZ,CAAC;cACDC,KAAK,EAAE;gBACL1B,OAAO,EAAE,IAAI;gBACb2B,IAAI,EAAE,kBAAkBlD,OAAO;cACjC,CAAC;cACDsB,UAAU,EAAE;gBACVC,OAAO,EAAGC,OAAO,IAAKA,OAAO,CAACC,SAAS,KAAK,CAAC;gBAC7CC,SAAS,EAAEA,CAACC,KAAK,EAAEH,OAAO,KAAK;kBAC7B,MAAMI,KAAK,GAAGJ,OAAO,CAACK,OAAO,CAAChC,IAAI,CAACiC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC;kBACrE,MAAMlB,UAAU,GAAGc,KAAK,GAAG,CAAC,GAAG,CAAEJ,OAAO,CAACK,OAAO,CAAChC,IAAI,CAAC,CAAC,CAAC,GAAG+B,KAAK,GAAI,GAAG,EAAEb,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI;kBAC1F,OAAOD,UAAU,KAAK,IAAI,GAAG,GAAGA,UAAU,GAAG,GAAG,gBAAgB;gBAClE,CAAC;gBACDmB,KAAK,EAAE,OAAO;gBACdC,IAAI,EAAE;kBACJC,MAAM,EAAE,MAAM;kBACdC,IAAI,EAAE;gBACR;cACF;YACF;UACF;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA,GA7BM1C,OAAO;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA8BZ,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC3D,EAAA,CA1HID,gBAAgB;AAAAqE,EAAA,GAAhBrE,gBAAgB;AA4HtB,eAAeA,gBAAgB;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}