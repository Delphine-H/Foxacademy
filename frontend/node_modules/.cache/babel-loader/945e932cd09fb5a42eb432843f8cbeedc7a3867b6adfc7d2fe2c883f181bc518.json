{"ast":null,"code":"var _jsxFileName = \"/app/src/components/spaceInvaders/SpaceInvader.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport Player from './Player';\nimport Controls from './Controls';\nimport { fetchUserScore } from '../../utils/appUtils';\nimport { generateEnemies, moveRockets, checkCollisions, moveEnemies, movePlayer, shootRocket, victorySound, collisionSound, rainbowColors } from '../../utils/gameUtils';\nimport spaceInvaderImage from '../../assets/game_screenshot/space_invader.png';\nimport '../../styles/spaceInvaders.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Game() {\n  _s();\n  const canvasRef = useRef(null);\n  const [playerX, setPlayerX] = useState(375);\n  const [movingLeft, setMovingLeft] = useState(false);\n  const [movingRight, setMovingRight] = useState(false);\n  const [rockets, setRockets] = useState([]); // Array of rockets\n  const [lastShotTime, setLastShotTime] = useState(0);\n  const [enemies, setEnemies] = useState(generateEnemies()); // Array of enemies\n  const [enemyDirection, setEnemyDirection] = useState('right');\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [score, setScore] = useState(0);\n  const [gameStatus, setGameStatus] = useState('waiting'); // Initial game status is 'waiting'\n  const [enemySpeed, setEnemySpeed] = useState(15);\n  const [enemyColorIndex, setEnemyColorIndex] = useState(0);\n  const lastUpdateTimeRef = useRef(performance.now()); // Reference to the last update time\n  const [totalScore, setTotalScore] = useState(0); // Total score of the user (will be fetched from the backend)\n\n  const movePlayerCallback = useCallback(() => {\n    movePlayer(playerX, setPlayerX, movingLeft, movingRight);\n  }, [playerX, setPlayerX, movingLeft, movingRight]);\n  const shootRocketCallback = useCallback(() => {\n    shootRocket(playerX, lastShotTime, setLastShotTime, setRockets);\n  }, [playerX, lastShotTime, setLastShotTime, setRockets]);\n  const updateGame = useCallback(() => {\n    if (gameStatus !== 'playing') return;\n    const now = performance.now();\n    const deltaTime = now - lastUpdateTimeRef.current;\n    lastUpdateTimeRef.current = now;\n    movePlayerCallback();\n    setRockets(prevRockets => moveRockets(prevRockets));\n    const {\n      newEnemies,\n      rocketsToRemove\n    } = checkCollisions(enemies, rockets);\n    if (rocketsToRemove.size > 0 && collisionSound) {\n      collisionSound.play();\n    }\n    setEnemies(newEnemies);\n    setRockets(prevRockets => moveRockets(prevRockets, rocketsToRemove));\n    setTimeElapsed(prevTime => prevTime + deltaTime);\n    if (timeElapsed + deltaTime >= 1000) {\n      setEnemies(prevEnemies => moveEnemies(prevEnemies, enemyDirection, setEnemyDirection, enemySpeed, setGameStatus));\n      setTimeElapsed(0);\n    }\n    if (newEnemies.length === 0) {\n      victorySound.play();\n      setScore(prevScore => prevScore + 1);\n      setEnemySpeed(prevSpeed => prevSpeed + 3);\n      setEnemyColorIndex(prevIndex => (prevIndex + 1) % rainbowColors.length);\n      setEnemies(generateEnemies());\n    }\n  }, [gameStatus, movePlayerCallback, rockets, enemies, enemyDirection, timeElapsed, enemySpeed]);\n  useEffect(() => {\n    const interval = setInterval(updateGame, 16);\n    return () => clearInterval(interval);\n  }, [updateGame]);\n  useEffect(() => {\n    const fetchTotalScore = async () => {\n      try {\n        const score = await fetchUserScore();\n        setTotalScore(score);\n      } catch (error) {\n        console.error('Erreur lors de la récupération du score de l\\'utilisateur:', error);\n      }\n    };\n    fetchTotalScore();\n  }, []);\n  useEffect(() => {\n    if (gameStatus === 'waiting') {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.src = spaceInvaderImage;\n      img.onload = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      };\n    }\n  }, [gameStatus]);\n  const startGame = async () => {\n    try {\n      const userScore = await fetchUserScore();\n      console.log('Score de l\\'utilisateur:', userScore);\n      if (userScore < 10) {\n        alert('Tu n\\'as pas assez de points pour démarrer le jeu. Tu as besoin de 10 points pour jouer.');\n        return;\n      }\n      const response = await axios.post(`http://localhost:5000/game/consume`, {\n        ScoreConsumed: 10\n      }, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      if (response.status === 200) {\n        setTotalScore(response.data.newTotalScore);\n        setGameStatus('playing');\n      } else {\n        alert('Erreur lors de la consommation des points. Veuillez réessayer.');\n      }\n    } catch (error) {\n      if (error.response && error.response.status === 401) {\n        alert('Votre session a expiré. Vous devez vous reconnecter pour jouer.');\n      } else {\n        alert('Erreur lors de la vérification des points. Veuillez réessayer.');\n      }\n    }\n  };\n  const resetGame = () => {\n    setPlayerX(375);\n    setMovingLeft(false);\n    setMovingRight(false);\n    setRockets([]);\n    setEnemies(generateEnemies());\n    setEnemyDirection('right');\n    setTimeElapsed(0);\n    setScore(0);\n    setGameStatus('waiting');\n    setEnemySpeed(15);\n    setEnemyColorIndex(0);\n    lastUpdateTimeRef.current = performance.now();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    tabIndex: \"0\",\n    style: {\n      margin: '20px',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Space Invaders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '100px',\n        left: '10px',\n        fontSize: '18px',\n        fontWeight: 'bold'\n      },\n      children: [\"Score Total: \", totalScore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 800,\n      height: 600,\n      style: {\n        border: '2px solid black',\n        backgroundColor: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: gameStatus === 'waiting' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startGame,\n        className: \"start-button\",\n        children: \"Commencer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Player, {\n          canvasRef: canvasRef,\n          playerX: playerX,\n          rockets: rockets,\n          enemies: enemies,\n          gameStatus: gameStatus,\n          enemyColor: rainbowColors[enemyColorIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {\n          setMovingLeft: setMovingLeft,\n          setMovingRight: setMovingRight,\n          shootRocket: shootRocketCallback,\n          gameStatus: gameStatus,\n          resetGame: resetGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Points de la partie : \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), gameStatus === 'lost' && /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Bien jou\\xE9, essaye encore !\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 9\n  }, this);\n}\n_s(Game, \"EnEQViTjT6vm8w6JII4uSjq8PPA=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","axios","Player","Controls","fetchUserScore","generateEnemies","moveRockets","checkCollisions","moveEnemies","movePlayer","shootRocket","victorySound","collisionSound","rainbowColors","spaceInvaderImage","jsxDEV","_jsxDEV","Fragment","_Fragment","Game","_s","canvasRef","playerX","setPlayerX","movingLeft","setMovingLeft","movingRight","setMovingRight","rockets","setRockets","lastShotTime","setLastShotTime","enemies","setEnemies","enemyDirection","setEnemyDirection","timeElapsed","setTimeElapsed","score","setScore","gameStatus","setGameStatus","enemySpeed","setEnemySpeed","enemyColorIndex","setEnemyColorIndex","lastUpdateTimeRef","performance","now","totalScore","setTotalScore","movePlayerCallback","shootRocketCallback","updateGame","deltaTime","current","prevRockets","newEnemies","rocketsToRemove","size","play","prevTime","prevEnemies","length","prevScore","prevSpeed","prevIndex","interval","setInterval","clearInterval","fetchTotalScore","error","console","canvas","ctx","getContext","img","Image","src","onload","clearRect","width","height","drawImage","startGame","userScore","log","alert","response","post","ScoreConsumed","headers","Authorization","localStorage","getItem","status","data","newTotalScore","resetGame","tabIndex","style","margin","display","flexDirection","alignItems","children","fileName","_jsxFileName","lineNumber","columnNumber","position","top","left","fontSize","fontWeight","ref","border","backgroundColor","onClick","className","enemyColor","_c","$RefreshReg$"],"sources":["/app/src/components/spaceInvaders/SpaceInvader.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport Player from './Player';\nimport Controls from './Controls';\nimport { fetchUserScore } from '../../utils/appUtils';\nimport { generateEnemies, moveRockets, checkCollisions, moveEnemies, movePlayer, shootRocket, victorySound, collisionSound, rainbowColors } from '../../utils/gameUtils';\nimport spaceInvaderImage from '../../assets/game_screenshot/space_invader.png';\nimport '../../styles/spaceInvaders.css';\n\nfunction Game() {\n    const canvasRef = useRef(null);\n    const [playerX, setPlayerX] = useState(375);\n    const [movingLeft, setMovingLeft] = useState(false);\n    const [movingRight, setMovingRight] = useState(false);\n    const [rockets, setRockets] = useState([]); // Array of rockets\n    const [lastShotTime, setLastShotTime] = useState(0);\n    const [enemies, setEnemies] = useState(generateEnemies()); // Array of enemies\n    const [enemyDirection, setEnemyDirection] = useState('right');\n    const [timeElapsed, setTimeElapsed] = useState(0);\n    const [score, setScore] = useState(0);\n    const [gameStatus, setGameStatus] = useState('waiting'); // Initial game status is 'waiting'\n    const [enemySpeed, setEnemySpeed] = useState(15);\n    const [enemyColorIndex, setEnemyColorIndex] = useState(0);\n    const lastUpdateTimeRef = useRef(performance.now()); // Reference to the last update time\n    const [totalScore, setTotalScore] = useState(0); // Total score of the user (will be fetched from the backend)\n\n    const movePlayerCallback = useCallback(() => {\n        movePlayer(playerX, setPlayerX, movingLeft, movingRight);\n    }, [playerX, setPlayerX, movingLeft, movingRight]);\n\n    const shootRocketCallback = useCallback(() => {\n        shootRocket(playerX, lastShotTime, setLastShotTime, setRockets);\n    }, [playerX, lastShotTime, setLastShotTime, setRockets]);\n\n    const updateGame = useCallback(() => {\n        if (gameStatus !== 'playing') return;\n\n        const now = performance.now();\n        const deltaTime = now - lastUpdateTimeRef.current;\n        lastUpdateTimeRef.current = now;\n\n        movePlayerCallback();\n\n        setRockets(prevRockets => moveRockets(prevRockets));\n        const { newEnemies, rocketsToRemove } = checkCollisions(enemies, rockets);\n        if (rocketsToRemove.size > 0 && collisionSound) {\n            collisionSound.play();\n        }\n\n        setEnemies(newEnemies);\n\n        setRockets(prevRockets => moveRockets(prevRockets, rocketsToRemove));\n\n        setTimeElapsed(prevTime => prevTime + deltaTime);\n\n        if (timeElapsed + deltaTime >= 1000) {\n            setEnemies(prevEnemies => moveEnemies(prevEnemies, enemyDirection, setEnemyDirection, enemySpeed, setGameStatus));\n            setTimeElapsed(0);\n        }\n\n        if (newEnemies.length === 0) {\n            victorySound.play();\n            setScore(prevScore => prevScore + 1);\n            setEnemySpeed(prevSpeed => prevSpeed + 3);\n            setEnemyColorIndex(prevIndex => (prevIndex + 1) % rainbowColors.length);\n            setEnemies(generateEnemies());\n        }\n    }, [gameStatus, movePlayerCallback, rockets, enemies, enemyDirection, timeElapsed, enemySpeed]);\n\n    useEffect(() => {\n        const interval = setInterval(updateGame, 16);\n        return () => clearInterval(interval);\n    }, [updateGame]);\n\n    useEffect(() => {\n        const fetchTotalScore = async () => {\n            try {\n                const score = await fetchUserScore();\n                setTotalScore(score);\n            } catch (error) {\n                console.error('Erreur lors de la récupération du score de l\\'utilisateur:', error);\n            }\n        };\n        fetchTotalScore();\n    }, []);\n\n    useEffect(() => {\n        if (gameStatus === 'waiting') {\n            const canvas = canvasRef.current;\n            const ctx = canvas.getContext('2d');\n            const img = new Image();\n            img.src = spaceInvaderImage;\n            img.onload = () => {\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            };\n        }\n    }, [gameStatus]);\n\n    const startGame = async () => {\n        try {\n            const userScore = await fetchUserScore();\n            console.log('Score de l\\'utilisateur:', userScore);\n            if (userScore < 10) {\n                alert('Tu n\\'as pas assez de points pour démarrer le jeu. Tu as besoin de 10 points pour jouer.');\n                return;\n            }\n            const response = await axios.post(`http://localhost:5000/game/consume`, { ScoreConsumed: 10 }, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem('token')}`\n                }\n            });\n\n            if (response.status === 200) {\n                setTotalScore(response.data.newTotalScore);\n                setGameStatus('playing');\n            } else {\n                alert('Erreur lors de la consommation des points. Veuillez réessayer.');\n            }\n        } catch (error) {\n            if (error.response && error.response.status === 401) {\n                alert('Votre session a expiré. Vous devez vous reconnecter pour jouer.');\n            } else {\n                alert('Erreur lors de la vérification des points. Veuillez réessayer.');\n            }\n        }\n    };\n\n    const resetGame = () => {\n        setPlayerX(375);\n        setMovingLeft(false);\n        setMovingRight(false);\n        setRockets([]);\n        setEnemies(generateEnemies());\n        setEnemyDirection('right');\n        setTimeElapsed(0);\n        setScore(0);\n        setGameStatus('waiting');\n        setEnemySpeed(15);\n        setEnemyColorIndex(0);\n        lastUpdateTimeRef.current = performance.now();\n    };\n\n    return (\n        <div tabIndex=\"0\" style={{ margin: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n            <h2>Space Invaders</h2>\n            <div style={{ position: 'absolute', top: '100px', left: '10px', fontSize: '18px', fontWeight: 'bold' }}>\n                Score Total: {totalScore}\n            </div>\n            <canvas ref={canvasRef} width={800} height={600} style={{ border: '2px solid black', backgroundColor: 'white' }}></canvas>\n            <div>\n            {gameStatus === 'waiting' ? (\n                <button onClick={startGame} className=\"start-button\">\n                    Commencer\n                </button>\n            ) : (\n                <>\n                    <Player canvasRef={canvasRef} playerX={playerX} rockets={rockets} enemies={enemies} gameStatus={gameStatus} enemyColor={rainbowColors[enemyColorIndex]} />\n                    <Controls\n                        setMovingLeft={setMovingLeft}\n                        setMovingRight={setMovingRight}\n                        shootRocket={shootRocketCallback}\n                        gameStatus={gameStatus}\n                        resetGame={resetGame}\n                    />\n                    <h3>Points de la partie : {score}</h3>\n                    {gameStatus === 'lost' && <h3>Bien joué, essaye encore !</h3>}\n                </>\n            )}\n            </div>\n        </div>\n    );\n}\n\nexport default Game;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}