{"ast":null,"code":"// Array of rainbow colors used for enemy colors\nexport const rainbowColors = ['red', 'orange', 'yellow', 'springgreen', 'blue', 'indigo', 'violet'];\n\n// Sound effects\nexport const victorySound = new Audio('/sounds/victory.mp3');\nexport const collisionSound = new Audio('/sounds/collision.mp3');\nexport const gameOverSound = new Audio('/sounds/gameover.mp3');\n\n// Function to generate the initial array of enemies\nexport function generateEnemies() {\n  const enemiesArray = [];\n  for (let i = 0; i < 5; i++) {\n    // 5 rows of enemies\n    for (let j = 0; j < 10; j++) {\n      // 10 enemies per row\n      enemiesArray.push({\n        x: j * 60,\n        y: i * 40\n      }); // Position each enemy\n    }\n  }\n  return enemiesArray;\n}\n\n// Function to move rockets upwards and filter out those that are off-screen or hit an enemy\nexport function moveRockets(rockets, rocketsToRemove = new Set()) {\n  return rockets.map(rocket => ({\n    ...rocket,\n    y: rocket.y - 5\n  })) // Move rocket up by 5 units\n  .filter(rocket => rocket.y > 0 && !rocketsToRemove.has(rocket.id)); // Remove rockets that are off-screen or hit an enemy\n}\n\n// Function to shoot a rocket from the player's position\nexport function shootRocket(playerX, lastShotTime, setLastShotTime, setRockets) {\n  const now = performance.now();\n  if (now - lastShotTime < 500) return; // 500ms delay between shots\n  setLastShotTime(now);\n  setRockets(prevRockets => [...prevRockets, {\n    x: playerX + 22.5,\n    y: 530,\n    id: now\n  }]); // Add new rocket\n}\n\n// Function to check for collisions between rockets and enemies\nexport function checkCollisions(enemies, rockets) {\n  const newEnemies = [];\n  const rocketsToRemove = new Set();\n  enemies.forEach(enemy => {\n    const hit = rockets.some(rocket => {\n      const collision = rocket.x < enemy.x + 50 && rocket.x + 5 > enemy.x && rocket.y < enemy.y + 30 && rocket.y + 20 > enemy.y;\n      if (collision) {\n        rocketsToRemove.add(rocket.id); // Mark rocket for removal\n      }\n      return collision;\n    });\n    if (!hit) {\n      newEnemies.push(enemy); // Keep enemy if not hit\n    }\n  });\n  return {\n    newEnemies,\n    rocketsToRemove\n  };\n}\n\n// Function to move the player left or right\nexport function movePlayer(playerX, setPlayerX, movingLeft, movingRight) {\n  if (movingLeft && playerX > 0) setPlayerX(prevX => prevX - 5);\n  if (movingRight && playerX < 750) setPlayerX(prevX => prevX + 5);\n}\n\n// Function to move enemies and handle direction changes and descent\nexport function moveEnemies(enemies, direction, setDirection, speed, setGameStatus) {\n  let newDirection = direction;\n  let shouldDescend = false;\n  let gameOver = false;\n\n  // Check if any enemy reaches the edge of the screen\n  enemies.forEach(enemy => {\n    if (direction === 'right' && enemy.x + 50 + speed >= 800) {\n      newDirection = 'left';\n      shouldDescend = true;\n    } else if (direction === 'left' && enemy.x - speed <= 0) {\n      newDirection = 'right';\n      shouldDescend = true;\n    }\n  });\n  const newEnemies = enemies.map(enemy => {\n    let newX = enemy.x;\n    let newY = enemy.y;\n    if (direction === 'right') {\n      newX += speed;\n    } else {\n      newX -= speed;\n    }\n    if (shouldDescend) {\n      newY += 40; // Move enemies down by 40 units\n    }\n    if (newY >= 520) {\n      gameOver = true; // Game over if any enemy reaches the player's level\n    }\n    return {\n      ...enemy,\n      x: newX,\n      y: newY\n    };\n  });\n  if (gameOver) {\n    setGameStatus('lost');\n    gameOverSound.play();\n  }\n  setDirection(newDirection); // Update direction\n  return newEnemies;\n}","map":{"version":3,"names":["rainbowColors","victorySound","Audio","collisionSound","gameOverSound","generateEnemies","enemiesArray","i","j","push","x","y","moveRockets","rockets","rocketsToRemove","Set","map","rocket","filter","has","id","shootRocket","playerX","lastShotTime","setLastShotTime","setRockets","now","performance","prevRockets","checkCollisions","enemies","newEnemies","forEach","enemy","hit","some","collision","add","movePlayer","setPlayerX","movingLeft","movingRight","prevX","moveEnemies","direction","setDirection","speed","setGameStatus","newDirection","shouldDescend","gameOver","newX","newY","play"],"sources":["/app/src/utils/gameUtils.js"],"sourcesContent":["// Array of rainbow colors used for enemy colors\nexport const rainbowColors = ['red', 'orange', 'yellow', 'springgreen', 'blue', 'indigo', 'violet'];\n\n// Sound effects\nexport const victorySound = new Audio('/sounds/victory.mp3');\nexport const collisionSound = new Audio('/sounds/collision.mp3');\nexport const gameOverSound = new Audio('/sounds/gameover.mp3');\n\n// Function to generate the initial array of enemies\nexport function generateEnemies() {\n    const enemiesArray = [];\n    for (let i = 0; i < 5; i++) { // 5 rows of enemies\n        for (let j = 0; j < 10; j++) { // 10 enemies per row\n            enemiesArray.push({ x: j * 60, y: i * 40 }); // Position each enemy\n        }\n    }\n    return enemiesArray;\n}\n\n// Function to move rockets upwards and filter out those that are off-screen or hit an enemy\nexport function moveRockets(rockets, rocketsToRemove = new Set()) {\n    return rockets\n        .map(rocket => ({ ...rocket, y: rocket.y - 5 })) // Move rocket up by 5 units\n        .filter(rocket => rocket.y > 0 && !rocketsToRemove.has(rocket.id)); // Remove rockets that are off-screen or hit an enemy\n}\n\n// Function to shoot a rocket from the player's position\nexport function shootRocket(playerX, lastShotTime, setLastShotTime, setRockets) {\n    const now = performance.now();\n    if (now - lastShotTime < 500) return; // 500ms delay between shots\n    setLastShotTime(now);\n    setRockets(prevRockets => [...prevRockets, { x: playerX + 22.5, y: 530, id: now }]); // Add new rocket\n}\n\n// Function to check for collisions between rockets and enemies\nexport function checkCollisions(enemies, rockets) {\n    const newEnemies = [];\n    const rocketsToRemove = new Set();\n\n    enemies.forEach(enemy => {\n        const hit = rockets.some(rocket => {\n            const collision = rocket.x < enemy.x + 50 &&\n                              rocket.x + 5 > enemy.x &&\n                              rocket.y < enemy.y + 30 &&\n                              rocket.y + 20 > enemy.y;\n            if (collision) {\n                rocketsToRemove.add(rocket.id); // Mark rocket for removal\n            }\n            return collision;\n        });\n\n        if (!hit) {\n            newEnemies.push(enemy); // Keep enemy if not hit\n        }\n    });\n\n    return { newEnemies, rocketsToRemove };\n}\n\n// Function to move the player left or right\nexport function movePlayer(playerX, setPlayerX, movingLeft, movingRight) {\n    if (movingLeft && playerX > 0) setPlayerX(prevX => prevX - 5);\n    if (movingRight && playerX < 750) setPlayerX(prevX => prevX + 5);\n}\n\n// Function to move enemies and handle direction changes and descent\nexport function moveEnemies(enemies, direction, setDirection, speed, setGameStatus) {\n    let newDirection = direction;\n    let shouldDescend = false;\n    let gameOver = false;\n\n    // Check if any enemy reaches the edge of the screen\n    enemies.forEach(enemy => {\n        if (direction === 'right' && enemy.x + 50 + speed >= 800) {\n            newDirection = 'left';\n            shouldDescend = true;\n        } else if (direction === 'left' && enemy.x - speed <= 0) {\n            newDirection = 'right';\n            shouldDescend = true;\n        }\n    });\n\n    const newEnemies = enemies.map(enemy => {\n        let newX = enemy.x;\n        let newY = enemy.y;\n\n        if (direction === 'right') {\n            newX += speed;\n        } else {\n            newX -= speed;\n        }\n\n        if (shouldDescend) {\n            newY += 40; // Move enemies down by 40 units\n        }\n\n        if (newY >= 520) {\n            gameOver = true; // Game over if any enemy reaches the player's level\n        }\n\n        return { ...enemy, x: newX, y: newY };\n    });\n\n    if (gameOver) {\n        setGameStatus('lost');\n        gameOverSound.play();\n    }\n\n    setDirection(newDirection); // Update direction\n    return newEnemies;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}